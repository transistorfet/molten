

class Exception {
    val mut msg

    pub fn new(self, msg) {
        self.msg = msg
    }

    pub fn print(self) {
        println(self.msg)
    }
}


enum Option<'item> =
    | None
    | Some('item)

methods Option<'item> {
    pub fn unwrap(self) -> 'item {
        match self {
            Option::None => raise new Exception("Panic: unwrap on none")
            Option::Some(item) => item
        }
    }

    pub fn unwrap_or(self, item: 'item) -> 'item {
        match self {
            Option::None => item
            Option::Some(item) => item
        }
    }
}


class Iterator<'item> {
    pub fn next(self) -> Option<'item> {
        Option::None
    }

    pub fn reset(self) => ()
}



class SuperString {
    val mut len
    val mut str

    pub fn new(self, s) {
        self.str = s
        self.len = strlen(self.str)
    }

    pub fn length(self) -> Int {
        self.len
    }

    pub fn [](self, index: Int) {
        if index >= self.len then {
            raise new Exception("Index Out Of Range")
            // TODO this is here because raise returns unit instead of being marked as 'no return' somehow
            //'\0'
        } else {
            getindex(self.str, index)
        }
    }



    /*
    // TODO this doesn't handle UTF-8
    pub fn substr(self, start: Int, length: Int) {
        let newstr: String = molten_malloc(length + 1)
        // TODO this doesn't work because you can't get a pointer to an indexed position
        memcpy(newstr, self, length)
        //newstr[length] = 0
    }
    */
}

class SuperStringIterator {

}

pub fn +(str1: SuperString, str2: SuperString) -> SuperString {
    new SuperString(str1.str + str2.str)
}

pub fn +(str1: SuperString, ch: Char) -> SuperString {
    new SuperString(str1.str + str(ch))
}



class Array<'item> {
    val mut capacity
    val mut length
    val mut data: UniversalArray<'item>

    pub fn new(self) {
        self.length = 0
        self.capacity = 10
        //self.data = new UniversalArray<'item>(self.capacity)
        self.data = __ua_alloc(self.capacity)
    }

    pub fn len(self) {
        self.length
    }

    pub fn resize(self, capacity) {
        self.capacity = capacity
        self.data = __ua_resize(self.data, self.capacity);
    }

    pub fn push(self, item: 'item) {
        if self.length + 1 >= self.capacity then
            self.resize(self.capacity + 10)
        __ua_set(self.data, self.length, item)
        self.length = self.length + 1
    }

    pub fn [](self, index: Int) -> 'item {
        if index >= self.length then
            raise new Exception("IndexError: array index is out of bounds")
        else
            __ua_get(self.data, index)
    }

    pub fn [](self, index: Int, item: 'item) -> 'item {
        if index >= self.length then
            raise new Exception("IndexError: array index is out of bounds")
        else {
            __ua_set(self.data, index, item);
            item
        }
    }

    pub fn get(self, index: Int) {
        self[index]
    }

    /*
    pub fn insert(self, index: Int, item: 'item) {
        self.move_right(index, item)
    }

    pub fn move_right(self, index: Int, item: 'item) {
        if index >= self.length then {
            self.push(item)
        } else {
            let cur = __ua_get(self.data, index)
            __ua_set(self.data, index, item)
            self.move_right(index + 1, cur)
        }
    }
    */

    pub fn insert(self, index: Int, item: 'item) {
        if index >= self.length then {
            self.push(item);
            // TODO this is here because of a bug during the type refactor that was creating invalid IR fur the return type
        } else {
            let cur = __ua_get(self.data, index)
            __ua_set(self.data, index, item)
            self.insert(index + 1, cur)
        }
    }

    // TODO can't forward reference ArrayIterator
    //fn iter(self) {
    //    class ArrayIterator<'item> extends Iterator<'item> {
    //        decl new(ArrayIterator<'item>, Array<'item>) -> ArrayIterator<'item>
    //    }
    //    new ArrayIterator<'item>(self)
    //}

    // TODO add map, filter, reduce? Or should they go on the iterator parent class?
}

class ArrayIterator<'item> extends Iterator<'item> {
    val mut index
    val mut list: Array<'item>

    pub fn new(self, list) {
        self.index = 0
        self.list = list
    }

    pub fn next(self) -> Option<'item> {
        if self.index < self.list.len() then {
            let item = self.list[self.index]
            self.index = self.index + 1
            Option::Some(item)
        } else {
            Option::None
        }
    }

    pub fn reset(self) {
        self.index = 0;
    }
}

pub fn iter(array: Array<'item>) {
    new ArrayIterator<'item>(array)
}

/*
class HashMapNode<'item> {
    val mut key: String
    val mut data: 'item
    val mut next: HashMapNode<'item>

    pub fn new(self, key, data) {
        self.key = key
        self.data = data
        self.next = nil
    }
}

class HashMap<'item> {
    val mut size
    val mut data: UniversalArray<HashMapNode<'item>>

    pub fn new(self) {
        self.size = 10
        self.data = new UniversalArray<HashMapNode<'item>>(self.size)
    }

    pub fn resize(self, size) {
        self.size = size
        self.data = self.data.resize(self.size)
    }

    pub fn insert(self, key: String, item: 'item) {

    }



    pub fn hash(key: String) -> Int {

    }
}
*/


