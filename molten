#!/usr/bin/python3

import os
import sys
import shutil
import os.path
import argparse
import traceback
import subprocess

llvm_version = 11

if shutil.which("lli") is not None:
    # MacOS
    EXT = ""
elif shutil.which("lli-{}".format(llvm_version)) is not None:
    # Debian
    EXT = "-{}".format(llvm_version)
else:
    print("Error: unable to locate LLVM command line program \"lli\".  Please ensure that the LLVM {} tools are included in your $PATH".format(llvm_version))
    sys.exit(-1)

RM = "rm"
BUILD = "cargo build"
COMPILE = "cargo run --"
MOLFLAGS = "-O3"
CC = "clang"
CFLAGS = "-Iinclude"
LINK = "clang"
LDFLAGS = "-lc -lm -lgc -no-pie"
ILINK = "llvm-link" + EXT
IRUN = "lli" + EXT
PRELINK = "{} -b".format(COMPILE)


def main():
    parser = argparse.ArgumentParser(prog='molten', formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Simple build script for molten programs')
    subparsers = parser.add_subparsers()

    def add_build_args(cmd):
        cmd.add_argument('-f', '--force', action='store_true', help='Force a recompile of all files')
        cmd.add_argument('-d', '--debug', action='store_true', help='Run the compiler with debugging on')
        cmd.add_argument('-S', '--assembly', action='store_true', help='Compile to assembly and use the interpreter')
        cmd.add_argument('-o', '--output', type=str, help='Output file name')
        cmd.add_argument('--no-pre-link', action='store_true', help='Do not generate link files before compiling')

    cmd = subparsers.add_parser("build", help="compile a single file program")
    add_build_args(cmd)
    cmd.add_argument("filename")
    cmd.set_defaults(command=command_build)

    cmd = subparsers.add_parser("run", help="compile and run a single file program")
    add_build_args(cmd)
    cmd.add_argument("filename")
    cmd.set_defaults(command=command_run)

    cmd = subparsers.add_parser("clean", help="delete all generated files")
    cmd.add_argument("directory", nargs='?', default=".")
    cmd.set_defaults(command=command_clean)

    cmd = subparsers.add_parser("cleanall", help="delete all generated files including from all subdirectories")
    cmd.add_argument("directory")
    cmd.set_defaults(command=command_cleanall)

    args = parser.parse_args()
    if 'command' not in args:
        parser.print_help()
    else:
        try:
            args.command(args)
        except Exception as e:
            traceback.print_exc()
            sys.stderr.write("Command failed: " + str(e) + "\n")
            sys.exit(-1)


def command_build(args):
    target = args.output if args.output else os.path.splitext(args.filename)[0]
    if args.assembly:
        target += ".bc"
    deps = list(reversed(build_deps(args.filename, False if args.no_pre_link else True)))
    compile_and_link(target, deps, args=args)
    return target


def command_run(args):
    target = command_build(args)

    try:
        if args.assembly:
            runordie(IRUN + " " + target)
        else:
            runordie("./{}".format(target))
    except KeyboardInterrupt:
        print("\nKeyboardInterrupt")


def command_clean(args):
    os.system("cd {dir} && {rm} *.ll *.dec *.bc *.o *.bin".format(dir=args.directory, rm=RM))


def command_cleanall(args):
    for (basedir, dirnames, filenames) in os.walk(args.directory):
        for filename in filenames:
            if any(filename.endswith(ext) for ext in [ ".bc", ".ll", ".dec", ".o", ".bin" ]):
                path = os.path.join(basedir, filename)
                print("Deleting " + path)
                os.unlink(path)


def build_deps(filename, generate=True, alldeps=[]):
    alldeps.append(filename)
    if not filename.endswith('.mol'):
        return alldeps

    if generate:
        generate_link_file(filename)

    basename = os.path.splitext(filename)[0]
    with open(basename + '.l', 'r') as f:
        deps = f.readlines()
        deps.pop(0)
        for dep in deps:
            dep = dep.strip()
            if dep in alldeps:
                continue
            build_deps(find_file(dep), alldeps)
    return alldeps


def find_file(name):
    for ext in [ '.mol', '.c' ]:
        if os.path.exists(name + ext):
            return name + ext
    raise Exception("Unable to find dependency: {}".format(name))


def compile_and_link(target, deps, args):
    compiled = [ ]
    main = deps.pop()
    for dep in deps:
        compiled.append(compile(dep, mainfunc=False, force=args.force, assembly=args.assembly, debug=args.debug))
    compiled.append(compile(main, mainfunc=True, force=args.force, assembly=args.assembly, debug=args.debug))
    link(target, compiled, args.assembly)


def generate_link_file(filename):
    runordie("{prelink} {filename}".format(prelink=PRELINK, filename=filename))


def compile(filename, mainfunc=False, force=False, assembly=False, debug=False):
    target = os.path.splitext(filename)[0] + (".o" if not assembly else ".ll")
    if force or not os.path.exists(target) or os.path.getmtime(filename) > os.path.getmtime(target):
        if filename.endswith('.mol'):
            compile_molten(filename, target, mainfunc, force, assembly, debug)
        elif filename.endswith('.c'):
            compile_c(filename, target, mainfunc, force, assembly, debug)
        else:
            raise Exception("Unsupported source file extension")
    return target


def compile_molten(filename, target, mainfunc=False, force=False, assembly=False, debug=False):
    flags = MOLFLAGS
    flags += " -l" if not mainfunc else ""
    flags += " -d" if debug else ""
    flags += " -c" if not assembly else " -S --no-gc"
    runordie("{compile} {flags} {filename}".format(compile=COMPILE, flags=flags, filename=filename))


def compile_c(filename, target, mainfunc=False, force=False, assembly=False, debug=False):
    flags = ""
    flags += " -c" if not assembly else " -S"
    flags += " " + CFLAGS
    name = os.path.splitext(filename)[0]
    shutil.copyfile("{}.cdec".format(name), "{}.dec".format(name))
    runordie("{compile} {flags} -o {target} {filename}".format(compile=CC, flags=flags, target=target, filename=filename))


def link(target, filenames, assembly=False):
    if not assembly:
        runordie("{ld} {flags} -o {target} {files}".format(ld=LINK, flags=LDFLAGS, target=target, files=" ".join(filenames)))
    else:
        runordie("{ld} {files} > {target}".format(ld=ILINK, files=" ".join(filenames), target=target))


def runcmd(cmd):
    #print(cmd)
    result = subprocess.run(cmd, shell=True)
    return result.returncode


def runordie(cmd):
    #print("RUNORDIE: ", cmd)
    result = subprocess.run(cmd, shell=True)
    if result.returncode != 0:
        raise Exception("{} exited with code {}".format(cmd, result.returncode))



if __name__ == "__main__":
    main()

