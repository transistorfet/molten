
//! 56
//! 5
//! Thing
//! None

import lib.libcore

enum Nullable<'item> =
| Null
| Some('item)

class Option2<'item> {
    val mut has
    val mut item: Nullable<'item>

    fn new(self) {
        self.has = false
        self.item = Nullable::Null
    }

    fn some(item: 'item) {
        let opt = new Option2<'item>()
        opt.has = true
        opt.item = Nullable::Some(item)
        opt
    }

    fn none() {
        let opt = new Option2<'item>()
        opt.has = false
        opt.item = Nullable::Null
        opt
    }

    fn unwrap_or(self, item: 'item) {
        match self.item with
        | Nullable::Null => item
        | Nullable::Some(a) => a
    }
}

let opt1 = Option2::some(56)
println(str(opt1.unwrap_or(1)))
println(str(Option2::none().unwrap_or(5)))

let opt2 = Option2::some("Thing")
println(opt2.unwrap_or("Poop"))
println(Option2::none().unwrap_or("None"))

