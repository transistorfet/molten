
//!should_fail
//!err .*TypeError: type mismatch, expected Int but found 'a
//!err .*
//!err .*
//!err .*
//!err .*

// This Causes An Uncaught Error
//
// we define the argument as a universal variable, but we treat it like an Int
// and because we created a placeholder variable to check the body with, it worked
// such that it matched to Int, but we can pass in a string since the function type
// takes anything, but it will erroneously be treated as an Int inside the function.
// If we didn't explicitly declare that it has type 'a then I think it would produce
// an error. Honestly, it's surprising how many cases it does actually catch... the
// return type declaration, as 'a, is being ignored, so the return type is correct,
// but the case below is still illogical/not-well-formed

import lib.libcore

fn universal(a: 'a) -> 'a {
    a + 5
}
println(str(universal("Hey")))

