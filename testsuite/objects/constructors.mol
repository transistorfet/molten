 
//! 235
//! 236
//! 470
//! 242

import lib.libcore

class Object {
    val mut a: Int

    fn new(self, a) {
        self.a = a
    }

    fn test(self, x) {
        self.a = x;
    }
}

class Child1 extends Object {
    fn new(self, a) {
        Super::new(self, a)
        self.a = a + 1
    }

    // NOTE the type annotations are required here because we don't have constricted types
    fn new(self, a: Int, b: Int) {
        Super::new(self, a)
        self.a = a * b
    }

    fn test(self, x) {
        println(str(self.a + x))
    }
}

class Child2 extends Object {
    fn new(self, a) {
        Super::new(self, a)
        self.a = a + 7
    }

    fn test(self, x) {
        println(str(self.a * x))
    }
}

let obj0 = new Object(235)
let obj1 = new Child1(235)
let obj2 = new Child1(235, 2)
let obj3 = new Child2(235)

println(str(obj0.a))
println(str(obj1.a))
println(str(obj2.a))
println(str(obj3.a))

