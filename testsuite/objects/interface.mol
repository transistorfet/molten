
//! 18
//! Start End

import lib.libcore

class Object {
    fn new(self) { }

    fn make() {
        new Object()
    }

    // NOTE the type annotations are required here because we don't have constrained types yet
    fn multiply(x: Int, y: Int) {
        x * y
    }
}

class Thing extends Object {
    val mut s: String

    fn new(self) {
        Super::new(self)
        self.s = "Start"
    }

    fn test(self) {
        println(self.s + " End")
    }
}

let obj = Object::make()
println(str(Object::multiply(2, 9)))

let thing = new Thing()
thing.test()

