
//! Hey
//! true
//! 15
//! false
//! 10
//! 11.000000

trait TraitTest {
    decl thing(Self) -> Bool
}

impl TraitTest for String {
    fn thing(self) {
        println(self)
        true
    }
}

fn test_trait(t: 'a) where a: TraitTest {
    println(str(t.thing()))
}

test_trait("Hey")

impl TraitTest for Int {
    fn thing(self) {
        println(str(self))
        false
    }
}

fn test_trait_unpack(t: 'a) where a: TraitTest {
    let f = t.thing
    println(str(f(t)))
}

test_trait_unpack(15)

//let trait: TraitTest = "Hey"



trait Add {
    decl add(Self, Self) -> Self
}

impl Add for Int {
    fn add(self, y: Self) -> Self {
        self + y
    }
}

impl Add for Real {
    fn add(self, y: Self) -> Self {
        self + y
    }
}

fn test_add(x: 'a, y: 'a) -> 'a where a: Add {
    x.add(y)
}

println(str(test_add(5, 5)))
println(str(test_add(3.2, 7.8)))



