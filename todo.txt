
* should you make all visitor functions take a reference to the node itself (since typecheck accessor/resolver needs to send the node onward)
* all the def ids are now separate from the AST ids, but there are still some types that are taken from the ast id and not the ref->defid
* the mangle function doesn't convert dashes (-) in filenames into underscores
* in transform invoke, is there a better way to get the abi than to use an extra id to store the type?

* convert transform to use visitor??
* refactor transform to separate into multiple files
* upgrade the parser to nom 6 (code in stash, but with the changes, the parser is totally broken, no idea why)

* when a class has a member that is a closure function pointer, and that class is instantiated, then the compiler will segfault during optimization.
  It only happens if when trying to zero the allocated memory after calling molten_malloc to allocate a new object, but it happens either with a
  "store zeroinitialize" instruction, or attempting to call memset(), and only if I use LLVMGetElementType(rtype).  If I zeroinitialize another
  type or pass a const for size to memset(), it compiles without segfaulting.  It works without the zeroing even though molten_malloc() is passed
  the same LLVMGetElementType(rtype) size determiner...
* the lists.mol test is failing when indexing a literal list because it gets turned into a method call, which duplicates the list creation block,
  which causes a duplicate definition error.  Before the HIR change, the object ast was copied to the first argument, which duplicated all the IDs so
  that the type checking would unify them, but the duplicated AST was then refined separated after, which created two different variable names for the
  AST blocks, which is why it used to work.
* only when using llvm 11, and only with the match tt {} expr in reducedtest.mol, and optimizations enabled, the compiler hangs without ever completing
  In the test, the match is inside a function, but when moved to the top level, it hangs while compiling.  It happens regardless of mathc arm it seems


* for Expr resolve and accessor, the oid's could maybe be integrated into the ident?



* can you remove access to getindex, buffer, etc?
* you have to disallow the situation where a function returns a type variable that doesn't appear elsewhere in the definition, but that is then cast to a concrete type.  This
  is a blind cast and is unsafe, but we're currently relying on it for memory allocations and such
* iterators could be implemented as classes, traits implemented on something, or possibly closures?
* going from an object type to a trait object type would require automatically inserting a conversion, which we sort of do for type variables/generics in a really hacky way, with
  the codegen build_cast function which will automagically box any non-pointer types
* we could possibly implement traits statically, so the object would always be typed (no trait objects, and thus no generics with traits unless you switch to monomorphizing... or
  trait objects), but having static traits would allow the implementation to be separated from the class definition
* non boxed types should be able to use static traits too. I suppose all traits can have a static reference to the trait vtable rather than searching through the object's vtable,
  but we'd have to make function lookup a lot more complicated (search scope, then search for a trait impl for that type that contains that function?)
* how would the need to restrict traits to non typevars affect things? Would that be hard to change, just for traits
 

* just make transform functions for specific types in their own files, to break it up a bit.  Specifically, vtables could have their own impl Vtable {} functions transforming
  same for classes, and possibly functions as well, but they're a bit hairy

* rename Buffer type to RawPointerArray, or GenericsArray
* rename String type to ByteString, ByteArray, or CString, or ZString, or NullString, or NullByteArray, or ZByteArray, RawString
* rename SuperString type to String, will require a bunch of libcore changes
* rename List to Array or Vec

* need a way to import/compile directory of many files (libcore as many files)
* add a module keyword which is automatically inserted into .dec files, which actually calls the run function, including the canonical name/path when the module was compiled
* remove the forced visibility in refinery, when you decide on pub/priv semantics

* add an iterator type, (need to settle option type first)
* add namespace of some kind, such that you can group functions?  like 'module' from ML?? like impl from rust?? or like namespace from C

* there is an issue with raise, in that it is considered to return unit () instead of somehow being marked as not returning...  Getting type errors in Option def

* classes shouldn't require a new function if all data has initializers...
* make definitions always require an initializer
* there was an error where "let ni: newint" with no initializer was causing a type error with "expected class or concrete type", but that was actually because a definition without
  an initializer is the same as "let ni: newint = nil" and nil could not be cast to a Record, which newint is a typealias of a record


* add typeclasses




BUGS:
* when using an argument called 'self' in a non-method function, it causes an unwrap error
* the overload check seems to fail in test.mol lines 94/111 with foo2 in Stuff because of the new overload code.  It's giving an overload error unless foo2 which takes a
  single Real is commented out.  It's because the types are added during the name binding phase.  This needs to be added as a test case
* the infer-arg-as-typevar test fails because str() cannot be resolved to a concrete variant by the time it's typechecked (no backwards affect allowed)
* there is still a bug with the Phi statement, in that it will return null if you don't cover all cases. there is no check for coverage
* issue with calling function references store in structs or tuples... it converts them to methods incorrectly
* sizeof can only calculate the size of a pointer.  I think it has to be an AST element in order to work
* unwrap error when recursively calling in `let recfoo = fn x =>` because the actual DefLocal is inserted after the initializer code is transformed, but if this was fixed,
  would it be possible to access recfoo before it's been initialized, such as in `let something: Int = { something; 0 }`
* parse error for if statements in an expression, they require brackets around them: let h = 5 + if r > 4 then 5 else 10



Error Messages:
* there is no context info for the ununified variables, which makes it hard to find the issue
* you can put a restriction on type aliases such that a type can only use type vars defined in the declaration
* you could require that classes explicitly define their type variables by name, to catch type errors.  So every method or definition in the top level of the class
  could only use explicitly declared type variables
* you might not be making sure that non-closure functions don't access variables outside their scope (methods are never closures)
* make sure that you don't overload different types of functions (closures, functions, and methods must all be the same type to allow overloading)
* should you make mutable modifiers more strict, like rust?



Refactoring:
* make a visitor for all the ast stuff, and possibly make an HIR
* improve storing of file info in the Pos structs (maybe rename to Span?)
* change parser to take session argument or something so it can record the file info, and maybe do other advanced things
* there must be a way to fix the 'scope exceptions' (Scope::target) that we're doing to make class bodies work... pass in an argument to all scoped functions?  or use scopemap and scope ids?
* add the .set_id() functions to simplify ast builders
* try making a simple trait for function transforms, for the 3 types (might be more trouble than the current approach)





TESTS:
* test for static method vtable access, dynamic dispatch via that mechanism, and overloading used with resolve
* error conditions, lack of typing should error, etc
* test that non-closures accessing values outside their scope produces meaningful errors
* test that you don't allow overloading of overlapping function types, and different function types (??)
* test module system (might need a test opt-out for submodules in a test)




Changes:
* get hashmap in libcore working
* change how you reference an operator function; like op+ or (+)
* put intermediate files somewhere else, at least as controlled by the molten script, so as not to clutter source directories
* there's no way to genericly compare or print tuples or records (maybe memcmp based comparison)

* improve library path handling
* should it be possible to not import all symbols from a module?  Should there be a namespaced object thing?
* how does rust do "use" if there is a circular dependency?
* the module level scope is now a closed function, so you could return a representation of it as the "module" object

* comparisons need to be bools, so you can either force that in type checking or somehow desugar or use the comps style from match, or use typeclasses when added
* you could modify the forloop code to take an iterator in future
* should vtables be dynamically allocated, or should we add a LLType::ElementOf() type or something to GetElement an aliased type
* strings, buffers, and all the primative types require vtables if they have methods, but there aren't vtables stored inside them.  You could make static vtable exceptions for them
* make primative types unable to inherit from, because there's no vtable
* fix lib to allow builtin classes??

* can you make a check for nil before unboxing a type... and somehow return an appropriate default value?  I guess that's feasible because only primative types would be
  boxed/unboxed, although records and tuples might be an issue
* when you box a type to be converted to typevar, you can possibly add a vtable of sorts in the process, possibly containing functions and metadata for copying. You could also
  make buffer copying functions that take the element size and copy the buffer data into the boxed location.
* implement return value conversion (this doesn't appear to be needed?  Why didn't it work with tuple closures though?)



* add 'import as' syntax
* add 'decl as' syntax
* add pipe operator
* make loops use phi, and add break
* add proper pattern matching for definitions/matchcases/etc
* add typeclasses/traits
* add compiler directives?
* better support for generics






* should you add some means of accessing variant values without pattern matching?
* should you add access modifiers to classes, and maybe functions; public, private, protected
* should module init return something other than 0, like a module object?  Is that even useful?
* should exports also list all the modules that the file imports, so that class definitions in other imports can be found, if needed for arguments
* should you fix scope resolution to also work on objects, so that you can have static methods from the object without explicitly referencing its type
* should you remove the Nil type? (yes, but it'll be a bit tricky)
* should you add break/continue statements for loops
* should you add a return statement?  It's not functional, but it's practial
* should you change Real to Float?  also should you change them to lower case names, which is in line with sml, ocmal, f#
* should you allow keyword arguments in invoke; foo(a=10, b=20)
* should you allow arguments with a default value to be omitted from a function call?, that would require a bunch of changes to typechecking
* should local variables be allowed to be mutable...
* should you require an override keyword when masking definitions in lower scopes? like class definitions
* should you add macros and expandable forms (like lisp)
* should you implement assignment of tuples and records? (in addition to the record update syntax)

* is it even possible to add a special "constrained" type, which has &AST that must type check correctly in order to match (checks done in check_type)
* you might need to integrate type restrictions which have to get resolved later; like 'a where 'a is object with add(Int) method; not sure how you could be so specific without complexity
* what if you generalize overloaded types, such that they're checked in check_type, and options are eliminated, or resolved to one type over the course of checking
* should implement the proper bidirectional typechecker algorithm

* if you make ops methods, then everything has to be type annotated, with the type system as it is; you'd need constrained types, or multiple paths, or bidirectional or something
  make typed functions for all math operations, with the inlinealways attribute, if you decide to make operators methods



EXAMPLE PROGRAM IDEAS:

* hash table
* regex matcher


NOT REALLY BUGS:

* mabye not a bug, but unable to define a method as / MF or / C ABI
* not really a bug, but if you only have one element in a tuple, or in a record, it parses it as a block or expression
* not really a bug, but empty lists cannot be typechecked to concrete types unless it's explicitly provided ("[]" on its own)


COMPLETED TESTS (for reference):

* test for references, records, tuples, used in local vars, func args, return values, etc
* test for directly calling functions in records or tuples, which shouldn't add the object argument
* test for records that have different member orders are still equal
* test that raise inside a C function causes a syntax error
* test class init with inherited classes
* test for recursive C functions, recursive MF functions
* parse error with let bar = ref { a = 1, b = 2 } \n (!x).a


