
* I'd really like to change the way method calls are done.  It's annoying having all these definitions and blocks for every call
* reduce the number of clone()s
* maybe require an ignore type function call for statements that don't return unit (ie.  disallow having comparisons and math functions where the return value is ignored and the code will be optimized away,
  since it could be unintended)


TRAITS/TYPECLASSES:

* you could store constraints for universal variables in a global table in session, since all the copies of a single universal variable will have the same constraints, however
  universal variables cannot be mapped to placeholder variables unless the placeholders also record the constraints, which would then need to combine when the placeholder variables
  are being type checked/unified.  The constraints on universal variables would only need to be used during typechecking when mapping type variables, when they are transferred to
  the placeholder variables.  The placeholders would then unify against concrete types only if those concrete types implement the required trait constraints.
  For function bodies that use constrained universals, when a function is called from within that defines it's own universals with constraints, then it would map to placeholders,
  and the universals from the function body would be compared against placeholders??? wait, how do universals work in this case currently?  A placeholder variable *will* unify with
  a universal because it unifies with everything (currently)
  So the universals in the function being called will be mapped to placeholders with constraints, and then when a placeholder is checked with anything else, we'll probably need to
  treat each "anything else" type differently: for each trait constraint, if object then look for trait impl of that type; if universal then look up its constraints and match them;
  if ref... then maybe get it's internal type and check that (ie. if X implements constraints then ref X implements them, but maybe this would require treating each as different during
  transform still, since you'd need to insert an extra dereference?); if record, tuple, function, I'm not sure... for now it might fail if more than one constraint...  These types would
  need to be translated, such that "?a where ?a: Debug" wouldn't unify with a tuple/record/etc, but "(?a: Debug, ?a: Debug) would unify with (?b: Debug + Add, ?b: Debug + Add)"...
  In other words, yes, tuple/record/function cannot unify with a placeholder with constraints but it can unify with a placeholder without constraints or a tuple/record/function which
  contains placeholders with constraints.  If you could specify a type with placholders as an actual constraint, then you can have functions that have arguments that are universals
  "?a where ?a: ('b, 'b) -> 'b, 'b: Debug" there are two constraints, one on ?a that must be ('b, 'b) -> 'b, and one on 'b that must be Debug

* So... a constraint would need to be a Vec<(NodeID, Type)> such that each NodeID is the ID of a placeholder or universal that the constraint applies to, and the Type must
  unify (with the update arg in check_type being false) in order for the constraint to hold, for each constraint

* for traits, you still need to fix the passing of the object to the trait methods, which currently passes the trait object but the function expects the actual concrete type, and segfaults
* you could insert some code to do the argument unboxing inside each function being implemented, and make the body of the func use the unboxed reference, but that might not be trivial

* currently you have function overloading, and class method overloading, which are forms of ad-hoc polymorphism.  Should all function overloading instead require a trait
  implementation (eg. all the infix operator functions and str functions would become traits which would be implemented for different types instead of being overloaded funcs).
  Class methods kind of still need to be ad-hoc.
* if you made overloaded functions implement traits instead, then you'd want to be able to call them like functions, maybe sometimes also like methods (eg. str(x) and x.str())
* would you still be able overload function names and argument numbers?  You could have trait { add('a, 'a) } and also add(String, String, String), since the types of the functions
  don't overlap, but you couldn't also have add(Int, Int) which isn't defined as a trait impl, since it would conflict with add('a, 'a).  This might not be too different from what
  you have now, as long as you make sure to check trait def types when checking for overloading

* traits are currently being defined as object types (bindings:260), and the commented out code for subtyping allows a trait name to be used as an object, but if you switch
  to traits being constraints on type variables, then this would need to change.  Would you even record traits specially, as in not call define_type() but instead have a third
  (globally scoped?) map of traits?  Or do you make it a type, but a new special Trait type which can only be used in constraits?
* traits need inheritence/subtraits, such that the vtable could have pointers to the vtables of the dependents, or they could use a similar kind of inheritence as classes, but you need to
  have multiple dependent traits to work
* can you assume that all dependent traits are implemented for the same type, or could they be different types and thus the object/self that is passed to subtraits might need to be different???

* add typeclasses
* going from an object type to a trait object type would require automatically inserting a conversion, which we sort of do for type variables/generics in a really hacky way, with
  the codegen build_cast function which will automagically box any non-pointer types
* we could possibly implement traits statically, so the object would always be typed (no trait objects, and thus no generics with traits unless you switch to monomorphizing... or
  trait objects), but having static traits would allow the implementation to be separated from the class definition
* non boxed types should be able to use static traits too. I suppose all traits can have a static reference to the trait vtable rather than searching through the object's vtable,
  but we'd have to make function lookup a lot more complicated (search scope, then search for a trait impl for that type that contains that function?)
* how would the need to restrict traits to non typevars affect things? Would that be hard to change, just for traits



GENERAL ISSUES:

* make it possible to implement methods on enums
* you know... it might be possible to make all 'methods' actually be functions with a fixed type for the first argument, since functions can be overloaded, and the
  type would be unique.  I guess it wouldn't work for inheritence, but at least it doesn't cause this weird irregularity between classes/objects and enums (and eventually traits and trait objects)
* you need to figure out what should and shouldn't be a reference type... objects are always references that are malloced with 'new', and only objects can use 'new',
  whereas enums, records and tuples are not reference types, but can be made into references with 'ref'.  There will also be trait objects.  Enums are already 'Type::Object'
  and are distinguished by their definition, yet one a reference always and the other is not.  Trait objects would implicitly always be a reference


* it would be nice if you used the same parser trick as rust for distinguishing between calling a function pointer from an object vs a method call, by surrounding the function value in brackets
  but that might be difficult to parse out
* rust requires additional brackets around a function reference to distinguish between calling a function ptr stored inside a struct vs calling a method.  Perhaps we could do a
  similar thing to fix the record fptr test, but it might require a special case in the parser


* should you make all visitor functions take a reference to the node itself (since typecheck accessor/resolver needs to send the node onward)
* for transformer, you could have a list of 'bodies' of code, which are appended to by the transform functions, rather than returned.
  It could also store the context, but you'd have to add a body when transforming `if`, `while`, `sideeffect`, `match`, `try`, and `import`
* move the pattern transform functions into the visitor, but right now you're passing in a value_id to use for comparisons.  It'd have to be stored in the transformer obj insteado
* is there a way to remove all the references to memo and run functions (they're just duplicated, and they shouldn't be)
* can you remove FuncDef entirely?
* clean up warnings

* can you remove access to getindex, buffer, etc?
* if you had a way of indexing an object easily, given an llvm object, then you can fix the print() functions to take a SuperString (which would become String)
* You could have a mutable ByteArray type, which contains the length, or an immutable ByteString or ZByteString that can be passed to C functions, so that SuperString
  could have a ByteArray with the ability to index it (which would check the length), while a ZByteString would be unindexable (an opaque type)

* rename Buffer type to RawPointerArray, or GenericsArray, or BoxArray
* rename String type to ByteString, ByteArray, or CString, or ZString, or NullString, or NullByteArray, or ZByteArray, RawString;  I'm leaning ZByteArray or ByteString
* rename SuperString type to String, will require a bunch of libcore changes
* rename List to Array or Vec
* you have to disallow the situation where a function returns a type variable that doesn't appear elsewhere in the definition, but that is then cast to a concrete type.  This
  is a blind cast and is unsafe, but we're currently relying on it for memory allocations and such


* why is the primative == and != not causing an overload error?  (I assume it's because over*riding* is enabled (primative scope is different from module scope), but it's still a bit weird)
* will there be an issue where declaring a function that's external, but not via an import, might cause the global variable to be defined incorrectly??


* need a way to import/compile directory of many files (libcore as many files)
* add a module keyword which is automatically inserted into .dec files, which actually calls the run function, including the canonical name/path when the module was compiled
* remove the forced visibility in refinery, when you decide on pub/priv semantics

* classes shouldn't require a new function if all data has initializers...
* make definitions always require an initializer
* there was an error where "let ni: newint" with no initializer was causing a type error with "expected class or concrete type", but that was actually because a definition without
  an initializer is the same as "let ni: newint = nil" and nil could not be cast to a Record, which newint is a typealias of a record

* iterators could be implemented as classes, traits implemented on something, or possibly closures?
* add namespace of some kind, such that you can group functions?  like 'module' from ML?? like impl from rust?? or like namespace from C
* there is an issue with raise, in that it is considered to return unit () instead of somehow being marked as not returning...  Getting type errors in Option def
* for Expr resolve and accessor, the oid's could maybe be integrated into the ident? same for invoke now




BUGS:
* the overload check seems to fail in test.mol lines 94/111 with foo2 in Stuff because of the new overload code.  It's giving an overload error unless foo2 which takes a
  single Real is commented out.  It's because the types are added during the name binding phase.  This needs to be added as a test case
* the infer-arg-as-typevar test fails because str() cannot be resolved to a concrete variant by the time it's typechecked (no backwards affect allowed)
* there is still a bug with the Phi statement, in that it will return null if you don't cover all cases. there is no check for coverage
* issue with calling function references store in structs or tuples... it converts them to methods incorrectly
* unwrap error when recursively calling in `let recfoo = fn x =>` because the actual DefLocal is inserted after the initializer code is transformed, but if this was fixed,
  would it be possible to access recfoo before it's been initialized, such as in `let something: Int = { something; 0 }`
* parse error for if statements in an expression, they require brackets around them: let h = 5 + if r > 4 then 5 else 10



Error Messages:
* there is no context info for the ununified variables, which makes it hard to find the issue
* you can put a restriction on type aliases such that a type can only use type vars defined in the declaration
* you could require that classes explicitly define their type variables by name, to catch type errors.  So every method or definition in the top level of the class
  could only use explicitly declared type variables
* you might not be making sure that non-closure functions don't access variables outside their scope (methods are never closures)
* make sure that you don't overload different types of functions (closures, functions, and methods must all be the same type to allow overloading)
* should you make mutable modifiers more strict, like rust?



Refactoring:
* improve storing of file info in the Pos structs (maybe rename to Span?)
* change parser to take session argument or something so it can record the file info, and maybe do other advanced things
* there must be a way to fix the 'scope exceptions' (Scope::target) that we're doing to make class bodies work... pass in an argument to all scoped functions?  or use scopemap and scope ids?





TESTS:
* test for static method vtable access, dynamic dispatch via that mechanism, and overloading used with resolve
* error conditions, lack of typing should error, etc
* test that non-closures accessing values outside their scope produces meaningful errors
* test that you don't allow overloading of overlapping function types, and different function types (??)
* test module system (might need a test opt-out for submodules in a test)




Changes:
* get hashmap in libcore working
* change how you reference an operator function; like op+ or (+)
* put intermediate files somewhere else, at least as controlled by the molten script, so as not to clutter source directories
* there's no way to genericly compare or print tuples or records (maybe memcmp based comparison)

* improve library path handling
* should it be possible to not import all symbols from a module?  Should there be a namespaced object thing?
* how does rust do "use" if there is a circular dependency?
* the module level scope is now a closed function, so you could return a representation of it as the "module" object

* comparisons need to be bools, so you can either force that in type checking or somehow desugar or use the comps style from match, or use typeclasses when added
* you could modify the forloop code to take an iterator in future
* should vtables be dynamically allocated, or should we add a LLType::ElementOf() type or something to GetElement an aliased type
* strings, buffers, and all the primative types require vtables if they have methods, but there aren't vtables stored inside them.  You could make static vtable exceptions for them
* make primative types unable to inherit from, because there's no vtable
* fix lib to allow builtin classes??

* can you make a check for nil before unboxing a type... and somehow return an appropriate default value?  I guess that's feasible because only primative types would be
  boxed/unboxed, although records and tuples might be an issue
* when you box a type to be converted to typevar, you can possibly add a vtable of sorts in the process, possibly containing functions and metadata for copying. You could also
  make buffer copying functions that take the element size and copy the buffer data into the boxed location.
* implement return value conversion (this doesn't appear to be needed?  Why didn't it work with tuple closures though?)



* add 'import as' syntax
* add 'decl as' syntax
* add pipe operator
* make loops use phi, and add break
* add proper pattern matching for definitions/matchcases/etc
* add typeclasses/traits
* add compiler directives?
* better support for generics






* should you add some means of accessing variant values without pattern matching?
* should you add access modifiers to classes, and maybe functions; public, private, protected
* should module init return something other than 0, like a module object?  Is that even useful?
* should exports also list all the modules that the file imports, so that class definitions in other imports can be found, if needed for arguments
* should you fix scope resolution to also work on objects, so that you can have static methods from the object without explicitly referencing its type
* should you remove the Nil type? (yes, but it'll be a bit tricky)
* should you add break/continue statements for loops
* should you add a return statement?  It's not functional, but it's practial
* should you change Real to Float?  also should you change them to lower case names, which is in line with sml, ocmal, f#
* should you allow keyword arguments in invoke; foo(a=10, b=20)
* should you allow arguments with a default value to be omitted from a function call?, that would require a bunch of changes to typechecking
* should local variables be allowed to be mutable...
* should you require an override keyword when masking definitions in lower scopes? like class definitions
* should you add macros and expandable forms (like lisp)
* should you implement assignment of tuples and records? (in addition to the record update syntax)

* is it even possible to add a special "constrained" type, which has &AST that must type check correctly in order to match (checks done in check_type)
* you might need to integrate type restrictions which have to get resolved later; like 'a where 'a is object with add(Int) method; not sure how you could be so specific without complexity
* what if you generalize overloaded types, such that they're checked in check_type, and options are eliminated, or resolved to one type over the course of checking
* should implement the proper bidirectional typechecker algorithm

* if you make ops methods, then everything has to be type annotated, with the type system as it is; you'd need constrained types, or multiple paths, or bidirectional or something
  make typed functions for all math operations, with the inlinealways attribute, if you decide to make operators methods



EXAMPLE PROGRAM IDEAS:

* hash table
* regex matcher


NOT REALLY BUGS:

* mabye not a bug, but unable to define a method as / MF or / C ABI
* not really a bug, but if you only have one element in a tuple, or in a record, it parses it as a block or expression
* not really a bug, but empty lists cannot be typechecked to concrete types unless it's explicitly provided ("[]" on its own)


COMPLETED TESTS (for reference):

* test for references, records, tuples, used in local vars, func args, return values, etc
* test for directly calling functions in records or tuples, which shouldn't add the object argument
* test for records that have different member orders are still equal
* test that raise inside a C function causes a syntax error
* test class init with inherited classes
* test for recursive C functions, recursive MF functions
* parse error with let bar = ref { a = 1, b = 2 } \n (!x).a


