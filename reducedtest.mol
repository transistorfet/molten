
import lib.libcore

4 < 3 or 5 > 10

if true == true then {
   println("hey");
}


/*
// TODO this is only here because we were sometimes unable to import libcore
fn str(num: Int) -> String {
    let buffer: String = malloc(22)
    sprintf(buffer, "%ld", num, ())
    buffer
}
*/

let boo = false

println(str(true))
println(str(boo))

println(str(4))

//decl hex : (Int) -> String
//hex(2)

//decl foo2: () -> Int

let y = 12

fn foo() {
    fn bar() {
        45 + y
    }
    println(str(bar()))

    y + 12
}

foo()

let bar = foo
bar()

if foo() == 167 then 3 else foo()

if foo() == 24 and foo() == 24 then println("True") else println("False")
if y < 10 or y > 13 or y == 12 then println("True") else println("False")


// TODO this causes a parse error
//let x = ref { a = 2, b = 5 }
//(!x).a

let x = ref { a = 2, b = 5 }
println(str(*x.a))
*x = { a = 5, b = 10 }
println(str(*x.b))



let result = match 12 {
    1 => "Totally One"
    2 => "Two Poo"
    _ => "Some number"
}
println(result)




println(str(4))

let s = { a = 2, b = 5 }
println(str(s.a))

// TODO this doesn't work because the arg is pushed into the invoke
// but the constructor doesn't even work, even though it probably should
// store { i64 (i8*)*, i64, { i8* (i64, i8*)* }* }* %12, { i64 (i8*)* }** %37
//let s2 = { a = 2, b = foo }
//s2.b()

//fn test2() {
let clo = "It Closure Worked"

class Stuff {
    let what = 8

    fn new(self) { }

    fn tell() {
        println("Let me tell you!")
    }
}


class Thing extends Stuff {
    let mut foo = clo
    fn new(self) { }

    //fn bar(self) {
    //    self.foo = 129
    //    self.foo
    //}

    //decl baz: () -> Int / MF
}

let thing = new Thing()
println(thing.foo)
println(str(thing.what))
//println(str(thing.bar()))
//}
//test2()
Stuff::tell()


pub fn runloop() {
    let tval = "Hey"
    let l = [ 1, 2, 3]
    for i in l {
        println(tval)
    }
}
runloop()


try {
    raise new Exception("Test")
    ()
} catch {
    e => println("EXCEPTION! " + e.msg)
}

//let mem = bufalloc(10)
//bufset(mem, 0, thing)
//let otherthing: Thing = bufget(mem, 0)
//println(str(otherthing.bar()))

let mem2 = bufalloc(10)
bufset(mem2, 0, 42)
let number: Int = bufget(mem2, 0)
println(str(number))



//let list = [ 1, 2, 3 ]
//let iter = new ListIterator<Int>(list)
//println(str(iter.next()))
//println(str(iter.next()))
//println(str(iter.next()))
//println(str(iter.next()))

class Option2<'item> {
    let mut has = false
    let mut item: 'item = nil

    fn new(self) { }

    fn some(item) {
        let opt = new Option2<'item>()
        opt.has = true
        opt.item = item
        opt
    }

    fn none() {
        let opt = new Option2<'item>()
        opt.has = false
        opt.item = nil
        opt
    }

    fn unwrap_or(self, item: 'item) {
        if self.has then
            self.item
        else
            item
    }
}

let opt = Option2::some(37)
println(str(opt.unwrap_or(1)))

let opt2 = Option2::none()
println(str(opt2.unwrap_or(2)))

//let mut test = 4
//test = 5
//println(str(test))

/*
// TODO this doesn't work yet
fn rectestc(x) / C {
    if x <= 1 then
        1
    else
        rectestc(x - 1)
}

//println(str(rectestc(4)))
rectestc(4)
*/

fn pctest(i) {
    str(5 : Int)
}

let pc = (pctest(5) : String)


fn ctest() / C {
    //raise "Error"
}

fn test4() {
    let clo = "from test4 scope"
    match "thing" {
        e => {
            let a = "from match arm scope"
            println("e was " + e)
            println(a)
            println(clo)
        }
    }
}
test4()


let up = { s with a = 3 }
println(str(up.a) + " " +str(up.b))

enum Colours =
| Red
| Green
| Blue

let oe = Colours::Red;

enum TestThing =
| Variant1
| Variant2(Int)
| Variant3(String, String)

//let tt = TestThing::Variant1
//let tt = TestThing::Variant2(987)
let tt = TestThing::Variant3("Hey", "Ho")

/*
// TODO this causes the optimizer to hang when compiling this code
match tt {
    TestThing::Variant1 => println("It's Variant 1")
    TestThing::Variant2(n) => println("It's soo Variant 2 with " + str(n))
    TestThing::Variant3(s1, s2) => println("It's totally Variant 3 with " + s1 + " and " + s2)
    _ => println("I don't know")
}
*/

enum Value =
| None
| Integer(Int)
| String(String)
| Pair(String, String, Int)
| Tree(ref Value)

let val = Value::String("Hey")

match val {
    Value::String(s) => println(s)
    _ => ()
}

fn print_node(node) {
    match node {
        Value::String(s) => println("So " + s)
        Value::Tree(t) => {
            println("Tree")
            print_node(*t)
        }
        _ => println("Nothing")
    }
}

let val2 = Value::Tree(ref Value::Tree(ref Value::Tree(ref Value::Tree(ref Value::String("Hey\n")))))
print_node(val2)

4 \
* \
6

/*
while true {
    let ptr: String = molten_malloc(10)
}
*/

// TODO sizeof was removed because it didn't make sense
//let aoeu = 1
//println(str(sizeof(tt)))

//let teststr = "this is totally a string"
//println(str(teststr[0]))

//while true {
//    println(readline())
//}

1
4

println(str(42 * 4 \
   % 5))


println(str('\n'))


println(hex(int('0')))
println(str(char(0x30)))
println(str(real(54)))
println(str(int(12.25)))

/*
// TODO THIS CAUSES AN UNCAUGHT ERROR
// we define the argument as a universal variable, but we treat it like an Int
// and because we created a placeholder variable to check the body with, it worked
// such that it matched to Int, but we can pass in a string since the function type
// takes anything, but it will erroneously be treated as an Int.  If we didn't
// explicitly declare that it has type 'a then I think it would produce an error.
// Honestly, it's surprising how many cases it does actually catch... the return
// type declaration, as 'a, is being ignored, so the return type is correct, but
// the case below is still illogical/not-well-formed
fn universal(a: 'a) -> 'a {
    a + 5
}
println(str(universal("Hey")))
*/
