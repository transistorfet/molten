
import lib.libcore

4 < 3 or 5 > 10

if true == true then {
   println("hey");
}


let boo = false

println(str(true))
println(str(boo))

println(str(4))

//decl hex : (Int) -> String
//hex(2)

//decl foo2: () -> Int

let y = 12

fn foo() {
    fn bar() {
        45 + y
    }
    println(str(bar()))

    y + 12
}

foo()

let bar = foo
bar()

if foo() == 167 then 3 else foo()

if foo() == 24 and foo() == 24 then println("True") else println("False")
if y < 10 or y > 13 or y == 12 then println("True") else println("False")


// this previously caused a parse error
let x2 = ref { a = 2, b = 5 }
(*x2).a

let x = ref { a = 2, b = 5 }
println(str(*x.a))
*x = { a = 5, b = 10 }
println(str(*x.b))



let result = match 12 with
    | 1 => "Totally One"
    | 2 => "Two Poo"
    | _ => "Some number"
println(result)




println(str(4))

let s = { a = 2, b = 5 }
println(str(s.a))

// Test that you can call a non-method from an access by surronding the access in brackets
let s2 = { a = 2, b = foo }
(s2.b)()

//fn test2() {
let clo = "It Closure Worked"

class Stuff {
    val what: Int

    fn new(self) {
        self.what = 8
    }

    fn tell() {
        println("Let me tell you!")
    }
}


class Thing extends Stuff {
    val mut foo

    fn new(self) {
        Super::new(self)
        self.foo = clo
    }

    //fn bar(self) {
    //    self.foo = 129
    //    self.foo
    //}

    //decl baz: () -> Int / MF
}

let thing = new Thing()
println(thing.foo)
println(str(thing.what))
//println(str(thing.bar()))
//}
//test2()
Stuff::tell()


pub fn runloop() {
    let tval = "Hey"
    let l = [ 1, 2, 3]
    for i in new ArrayIterator<Int>(l) {
        println(tval)
    }
}
runloop()


try 
    raise new Exception("Test")
with
    e => println("EXCEPTION! " + e.msg)

//let mem = __ua_alloc(10)
//__ua_set(mem, 0, thing)
//let otherthing: Thing = __ua_get(mem, 0)
//println(str(otherthing.bar()))

let mem2 = __ua_alloc(10)
__ua_set(mem2, 0, 42)
let number: Int = __ua_get(mem2, 0)
println(str(number))



//let list = [ 1, 2, 3 ]
//let iter = new ArrayIterator<Int>(list)
//println(str(iter.next()))
//println(str(iter.next()))
//println(str(iter.next()))
//println(str(iter.next()))

class Option2<'item> {
    val mut has
    val mut item: Option<'item>

    fn new(self) {
        self.has = false
        self.item = Option::None
    }

    fn some(item) {
        let opt = new Option2<'item>()
        opt.has = true
        opt.item = Option::Some(item)
        opt
    }

    fn none() {
        let opt = new Option2<'item>()
        opt.has = false
        opt
    }

    fn unwrap_or(self, item: 'item) {
        if self.has then
            self.item.unwrap()
        else
            item
    }
}

let opt = Option2::some(37)
println(str(opt.unwrap_or(1)))

let opt2 = Option2::none()
println(str(opt2.unwrap_or(2)))

// This intentionally causes an assignment error
//let mut test = 4
//test = 5
//println(str(test))

// Test that you can write a recursive C function
fn rectestc(x) / C {
    if x <= 1 then
        1
    else
        rectestc(x - 1)
}
println(str(rectestc(4)))


fn pctest(i) {
    str(5 : Int)
}

let pc = (pctest(5) : String)


fn ctest() / C {
    // this is explicitly disallowed in a C function
    //raise "Error"
}

fn test4() {
    let clo = "from test4 scope"
    match "thing" with
        e => {
            let a = "from match arm scope"
            println("e was " + e)
            println(a)
            println(clo)
        }
}
test4()


let up = { s with a = 3 }
println(str(up.a) + " " +str(up.b))

enum Colours =
| Red
| Green
| Blue

let oe = Colours::Red;

enum TestThing =
| Variant1
| Variant2(Int)
| Variant3(String, String)

//let tt = TestThing::Variant1
//let tt = TestThing::Variant2(987)
let tt = TestThing::Variant3("Hey", "Ho")

// TODO this was causing the optimizer to hang when compiling this code
match tt with
| TestThing::Variant1 => println("It's Variant 1")
| TestThing::Variant2(n) => println("It's soo Variant 2 with " + str(n))
| TestThing::Variant3(s1, s2) => println("It's totally Variant 3 with " + s1 + " and " + s2)
| _ => println("I don't know")


enum Value =
| None
| Integer(Int)
| String(String)
| Pair(String, String, Int)
| Tree(ref Value)

let val = Value::String("Hey")

match val with
| Value::String(s) => println(s)
| _ => ()

fn print_node(node) {
    match node with
        | Value::String(s) => println("So " + s)
        | Value::Tree(t) => {
            println("Tree")
            print_node(*t)
        }
        | _ => println("Nothing")
}

let val2 = Value::Tree(ref Value::Tree(ref Value::Tree(ref Value::Tree(ref Value::String("Hey\n")))))
print_node(val2)

4 \
* \
6

/*
while true {
    let ptr: String = molten_malloc(10)
}
*/

// TODO sizeof was removed because it didn't make sense
//let aoeu = 1
//println(str(sizeof(tt)))

//let teststr = "this is totally a string"
//println(str(teststr[0]))

//while true {
//    println(readline())
//}

1
4

println(str(42 * 4 \
   % 5))


println(str('\n'))


println(hex(int('0')))
println(str(char(0x30)))
println(str(real(54)))
println(str(int(12.25)))


enum BrokenTest<'a> =
| Variant1
| Variant2('a)

let broken = BrokenTest::Variant2(5)

match broken with
| BrokenTest::Variant2(x) => println("stuff")
| _ => ()


// Test that you can pass different universals between functions, since the invoke will be mapped
fn moo1(t: 'a) {
    println("yay")
}

fn moo2(t: 'b) {
    moo1(t)
}


let opt3 = Option::Some(10)
match opt3 with
| Option::Some(x) => println(str(x))
| Option::None => println("None")

let opt4 = Option::Some("hey")
println(opt4.unwrap())


trait Display {
    decl str(Self) -> String
}


/*
impl Display for Option<'pants> where pants: Display {
    fn str(self) {
        match self with
        | Option::None => "None"
        | Option::Some(item) => "Some(" + item.str() + ")"
    }
}
*/

// Interesting, you can only use a trait on a universal, and not on a known copy of the type... eg. true.str() doesn't work
impl Display for Bool {
    fn str(self) {
        if self then "true" else "false"
    }
}

fn disy(data: 'a) where a: Display {
    println(data.str())
}

disy(true)


let itr = new ArrayIterator<_>([1, 2, 3, 4])
//println(str(iter.next().unwrap()))
//println(str(iter.next().unwrap()))

// TODO this type annotation is needed to satisfy the type checker
fn print_next(itr: ArrayIterator<Int>) {
    match itr.next() with
        Option::Some(item) => {
            println(str(item))
            true
        }
        | _ => false
}

// TODO while loops are kind of useless at the moment because we can't assign a value each iteration, nor break, nor mutate a flag
while print_next(itr) { }

itr.reset()

while {
    match itr.next() with
        Option::Some(i) => {
            let item = i
            println(str(item))
            true
        }
        | _ => false
} {
}


for item in iter(["one", "two", "three"]) {
    println(item)
}


/*
// TODO this causes an overload error instead of a forward definition
decl export() -> String

pub fn export() {
    "works"
}
*/

class TestException extends Exception {
    fn new(self) {
        Super::new(self, "something")
    }
}

class TestException2 extends Exception {
    fn new(self) {
        Super::new(self, "something")
    }
}

try
    raise new TestException2()
with
    e : TestException => println("hey")

let is_cat = true
is_cat and println("It's a cat") == ()

match (11, "Ten") with
| (10, name) => println(name)
| (10, _) => println("Something else named ")

match { num = 11, name = "Ten" } with
| { num = 10, name = name } => println(name)
| { num = _, name = name } => println("Something else named " + name)

